version: 2.1

defaults:
- &restore-cache
  restore_cache:
    keys:
    - dependencies-{{ checksum "build.sbt" }}
    - dependencies

- &save-cache
  save_cache:
    key: dependencies-{{ checksum "build.sbt" }}
    paths:
    - /home/circleci/.ivy2
    - /home/circleci/.sbt

- &install-python-pip
  run:
    name: Install python-dev, pip
    command: sudo apt-get update && sudo apt-get install -y libpython2.7-dev python-pip

- &install-awscli-credstash
  run:
    name: Install awscli and credstash
    command: sudo pip install awscli credstash==1.14.0

- &create-aws-credentials
  run:
    name: Create the AWS credentials file so that it will be available in the docker image
    command: |
      mkdir ~/.aws
      echo "[default]" >> ~/.aws/credentials
      echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
      echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials

- &login-to-ecr
  run:
    name: Login to ECR
    command: "aws --region eu-west-1 ecr get-login --no-include-email | bash"

- &add-github-host-ssh-key
  run:
    name: Configure git credentials
    command: |
      echo 'Adding the github host SSH key...'
      mkdir -p -m 0700 ~/.ssh/
      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts

- &configure-git-credentials
  run:
    name: Configure git credentials
    command: |
      git config user.name ovo-comms-circleci
      git config user.email "hello.comms@ovoenergy.com"

executors:
  docker:
    docker:
    - image: circleci/openjdk:8-jdk
    environment:
      JAVA_OPTS: "-Xmx1g -XX:MaxMetaspaceSize=1g -XX:MetaspaceSize=1g -XX:+CMSClassUnloadingEnabled"
      AWS_REGION: "eu-west-1"
      AWS_DEFAULT_REGION: "eu-west-1"
      TEST_TIME_SCALE_FACTOR: 3
  machine:
    machine:
      enabled: true
    environment:
      JAVA_OPTS: "-Xmx1g -XX:MaxMetaspaceSize=1g -XX:MetaspaceSize=1g -XX:+CMSClassUnloadingEnabled"
      AWS_REGION: "eu-west-1"
      AWS_DEFAULT_REGION: "eu-west-1"
      TEST_TIME_SCALE_FACTOR: 3

jobs:
  build:

    executor: docker

    steps:

    - checkout

    - *restore-cache

    - run:
        command: sbt update
        no_output_timeout: 20m

    - save_cache:
        key: dependencies-{{ .Branch }}-{{ checksum "build.sbt" }}
        paths:
        - /home/circleci/.ivy2
        - /home/circleci/.sbt

    - run: sbt scalafmtCheck
    - run: sbt test:scalafmtCheck
    - run: sbt it:scalafmtCheck
    - run: sbt servicetest:scalafmtCheck

    - run: sbt test:compile
    - run: sbt it:compile
    - run: sbt servicetest:compile
    - run: sbt undeclaredCompileDependenciesTest

    - persist_to_workspace:
        root: .
        paths:
        - project/target
        - project/project
        - target


  unit_test:

    executor: docker

    steps:

    - checkout

    - *restore-cache

    - attach_workspace:
        at: .

    - run:
        command: sbt test

    - store_test_results:
        path: target/test-reports

    - store_artifacts:
        path: target/unit-test.log
        destination: logs/unit-test.log

    - persist_to_workspace:
        root: .
        paths:
        - target/scala-2.12/test-classes

  integration_test:

    executor: machine

    steps:

    - checkout

    - *restore-cache

    - attach_workspace:
        at: .

    - run:
        command: sbt it:test

    - store_test_results:
        path: target/test-reports

    - store_artifacts:
        path: target/it.log
        destination: logs/integration_test.log

    - store_artifacts:
        path: target/it-docker.log
        destination: logs/integration_test-docker.log

    - persist_to_workspace:
        root: .
        paths:
        - target/scala-2.12/it-classes

  service_test:

    executor: machine

    steps:

    - checkout

    - *restore-cache

    - *install-python-pip

    - *install-awscli-credstash

    - *create-aws-credentials

    - *login-to-ecr

    - attach_workspace:
        at: .

    - run:
        command: sbt servicetest:test

    - store_test_results:
        path: target/test-reports

    - store_artifacts:
        path: target/service-test.log
        destination: logs/service-test.log

    - store_artifacts:
        path: target/service-test-docker.log
        destination: logs/service-test-docker.log

    - persist_to_workspace:
        root: .
        paths:
        - target/scala-2.12/servicetest-classes

  tag:

    executor: docker

    steps:

    - checkout

    - attach_workspace:
        at: .

    - *add-github-host-ssh-key

    - *configure-git-credentials

    - run:
        command: "build/tag.sh"

    # Update the workspace to make sure the git tags are available to the
    # downstream jobs
    - persist_to_workspace:
        root: .
        paths:
        - .git

  publish:

    executor: docker

    steps:

    - setup_remote_docker:
        docker_layer_caching: true

    - checkout

    - *restore-cache

    - *install-python-pip

    - *install-awscli-credstash

    - *create-aws-credentials

    - *login-to-ecr

    - attach_workspace:
        at: .

    - run:
        command: "sbt publish"
        no_output_timeout: 20m

  deploy-to-uat:

    executor: docker

    steps:

    - checkout

    - *restore-cache

    - attach_workspace:
        at: .

    - run:
        command: sbt staging:deploy
        no_output_timeout: 20m

  e2e_test:

    executor: docker

    steps:

    - *add-github-host-ssh-key

    - *install-python-pip

    - *install-awscli-credstash

    - run:
        name: Clone the e2e test project
        command: git clone git@github.com:ovotech/comms-e2e-tests

    - run:
        name: Run e2e tests
        command: cd comms-e2e-tests && sbt test

  deploy-to-prd:

    executor: docker

    steps:

    - checkout

    - *restore-cache

    - *install-python-pip

    - *install-awscli-credstash

    - *create-aws-credentials

    - attach_workspace:
        at: .

    - run:
        command: sbt production:deploy
        no_output_timeout: 20m


workflows:

  main:
    jobs:
    - build:
        filters:
          branches:
            ignore:
            - deploy-to-uat
            - deploy-to-uat-no-tests

    - unit_test:
        requires:
        - build

    - service_test:
        requires:
        - build

    - integration_test:
        requires:
        - build

    - tag:
        requires:
        - build
        - unit_test
        - service_test
        - integration_test
        filters:
          branches:
            only: master

    - publish:
        requires:
        - tag

    - deploy-to-uat:
        requires:
        - publish

    - e2e_test:
        requires:
        - deploy-to-uat

    - deploy-to-prd:
        requires:
        - e2e_test

  deploy-to-uat-only:
    jobs:

    - build:
        filters:
          branches:
            only: deploy-to-uat

    - unit_test:
        requires:
        - build

    - integration_test:
        requires:
        - build

    - service_test:
        requires:
        - build

    - publish:
        requires:
        - unit_test
        - service_test
        - integration_test

    - deploy-to-uat:
        requires:
        - publish

    - e2e_test:
        requires:
        - deploy-to-uat

  deploy-to-uat-no-tests:
    jobs:

    - build:
        filters:
          branches:
            only: deploy-to-uat-no-tests


    - publish:
        requires:
        - build

    - deploy-to-uat:
        requires:
        - publish




